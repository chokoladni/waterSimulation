#pragma kernel CSMain
#define M_PI 3.1415926535897932384626433832795
#define G 9.81

//outputs
RWTexture2D<float4> h0kTexOut;
RWTexture2D<float4> h0minuskTexOut;

//noise textures for generating gauss random numbers
Texture2D<float4> noise0;
Texture2D<float4> noise1;
Texture2D<float4> noise2;
Texture2D<float4> noise3;

//variables
int N;
int L;
float A;
float2 windDirection;
float windSpeed;

float4 gaussRandom(uint3 id) {
	float2 coords = id.xy;

	float noise00 = clamp(noise0[coords].r, 0.001, 1.0);
	float noise01 = clamp(noise1[coords].r, 0.001, 1.0);
	float noise02 = clamp(noise2[coords].r, 0.001, 1.0);
	float noise03 = clamp(noise3[coords].r, 0.001, 1.0);

	float u0 = 2.0 * M_PI * noise00;
	float v0 = sqrt(-2.0 * log(noise01));
	float u1 = 2.0 * M_PI * noise02;
	float v1 = sqrt(-2.0 * log(noise03));

	return float4(v0 * cos(u0), v0 * sin(u0), v1 * cos(u1), v1 * sin(u1));
}

[numthreads(16,16,1)]
void CSMain (uint3 id : SV_DispatchThreadID) {
	float2 x = float2(id.xy) - float(N) / 2.0f;
	float2 k = float2(float(2.0 * M_PI * x.x) / float(L), float(2.0 * M_PI * x.y) / float(L));

	float w2g = (windSpeed * windSpeed) / G;
	float mag = length(k);
	if (mag < 0.00001) mag = 0.00001;
	float mag2 = mag * mag;
	
	float h0k = clamp(sqrt((A / (mag2 * mag2)) * pow(dot(normalize(k), normalize(windDirection)), 6.0f)
		* exp(-(1.0 /(mag2 * w2g * w2g)))
		* exp(-mag2 * pow(float(L) / 2000.0, 2.0))) / sqrt(2.0), -100000, 100000);

	float h0minusk = clamp(sqrt((A / (mag2 * mag2)) * pow(dot(normalize(-1.0 * k), normalize(windDirection)), 6.0f)
		* exp(-(1.0 / (mag2 * w2g * w2g)))
		* exp(-mag2 * pow(float(L) / 2000.0, 2.0))) / sqrt(2.0), -100000, 100000);

	float4 rand = gaussRandom(id);

	h0kTexOut[id.xy] = float4(rand.xy * h0k, 0, 1);
	h0minuskTexOut[id.xy] = float4(rand.zw * h0minusk, 0, 1);
}